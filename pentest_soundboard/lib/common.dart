import 'dart:async';

import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:async/async.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';

import 'json.dart';

final scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();

void showSuccess(String message) {
  scaffoldMessengerKey.currentState!
    ..clearSnackBars()
    ..showSnackBar(
      SnackBar(
        backgroundColor: Colors.green,
        content: Text(message),
      ),
    );
}

void showError(String message) {
  scaffoldMessengerKey.currentState!
    ..clearSnackBars()
    ..showSnackBar(
      SnackBar(
        backgroundColor: Colors.red,
        content: Text(message),
      ),
    );
}

extension SpacedBy<T> on List<T> {
  Iterable<T> spacedBy(T spacer) sync* {
    if (length <= 1) {
      yield* this;
      return;
    }
    for (var i = 0; i < length - 1; i++) {
      yield this[i];
      yield spacer;
    }
    yield last;
  }
}

class Soundboard extends InheritedNotifier<SoundboardFlow> {
  const Soundboard({
    super.key,
    required super.child,
    required this.flow,
  }) : super(notifier: flow);

  final SoundboardFlow flow;

  static SoundboardFlow of(BuildContext context) {
    return context.dependOnInheritedWidgetOfExactType<Soundboard>()!.flow;
  }
}

class SoundboardFlow extends ChangeNotifier {
  final List<SoundboardAction> _actions = [];
  List<SoundboardAction> get actions => UnmodifiableListView(_actions);

  int get actionsCount => _actions.length;

  void addAction(SoundboardAction action) {
    _actions.add(action);
    notifyListeners();
  }

  void clearActions() {
    _actions.clear();
    notifyListeners();
  }
}

class SoundboardModalState {
  final Map<String, Object?> jsonBuilder = {};
}

class SoundboardModal extends InheritedWidget {
  const SoundboardModal({super.key, required this.state, required super.child});

  final SoundboardModalState state;

  static SoundboardModalState of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<SoundboardModal>()!.state;

  @override
  bool updateShouldNotify(covariant InheritedWidget oldWidget) => false;
}

class SoundboardFlowModal extends StatefulWidget {
  const SoundboardFlowModal({
    super.key,
  });

  @override
  State<SoundboardFlowModal> createState() => _SoundboardFlowModalState();
}

class _SoundboardFlowModalState extends State<SoundboardFlowModal> {
  final Set<SoundboardAction> _completedActions = {};
  final Map<SoundboardAction, Object> _failedActions = {};

  List<SoundboardAction> get actions => Soundboard.of(context).actions;

  Future<void> _executeFlow() async {
    for (final action in actions) {
      final result = await action.execute();
      if (result.isValue) {
        setState(() => _completedActions.add(action));
      } else {
        setState(() => _failedActions[action] = result.asError!.error);
      }
    }
  }

  Iterable<Widget> get _actionWidgets sync* {
    for (var i = 0; i < actions.length; i++) {
      final action = actions[i];
      final isSuccess = _completedActions.contains(action);
      final failure = _failedActions[action];
      final isFailure = failure != null;
      final color = isSuccess
          ? Colors.green
          : isFailure
              ? Colors.red
              : null;
      final title = Text(
        '$i: ${action.methodName}',
        style: Theme.of(context).textTheme.labelLarge!.copyWith(color: color),
      );
      if (isSuccess) {
        yield Row(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Icon(Icons.check, color: Colors.green),
            title,
          ],
        );
      } else if (isFailure) {
        yield Row(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Icon(Icons.close, color: Colors.red),
            title,
          ],
        );
      } else {
        yield title;
      }

      final bodyStyle =
          Theme.of(context).textTheme.bodyText2!.copyWith(color: color);
      if (action.request != null) {
        yield const SizedBox(height: 8);
        final request = Text(
          action.request.toString(),
          style: bodyStyle,
        );
        if (isFailure) {
          yield Row(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Expanded(child: request),
              const Spacer(),
              Expanded(
                child: Text(failure.toString(), style: bodyStyle),
              ),
            ],
          );
        } else {
          yield request;
        }
      }
      yield const SizedBox(height: 10);
      yield const Divider();
      yield const SizedBox(height: 10);
    }
  }

  void _deleteFlow() {
    Soundboard.of(context).clearActions();
    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Flow'),
        actions: [
          IconButton(
            onPressed: actions.isEmpty ? null : _deleteFlow,
            icon: const Icon(Icons.delete),
            tooltip: 'Delete Flow',
          ),
          IconButton(
            onPressed: actions.isEmpty ? null : _executeFlow,
            icon: const Icon(Icons.play_arrow),
            tooltip: 'Execute Flow',
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: actions.isEmpty
                ? const [Text('No actions')]
                : _actionWidgets.toList(),
          ),
        ),
      ),
    );
  }
}

class SoundboardAction {
  const SoundboardAction({
    required this.methodName,
    required this.method,
    this.symbol,
    this.request,
  });

  final String methodName;
  final Function method;
  final Symbol? symbol;
  final Object? request;

  Future<Result<Object?>> execute() async {
    try {
      final result = await Function.apply(
        method,
        symbol == null && request != null ? [request] : null,
        {
          if (symbol != null && request != null) symbol!: request,
        },
      ) as Object?;
      showSuccess(result.toString());
      return Result.value(result);
    } on Exception catch (e, st) {
      safePrint(e);
      safePrint(st);
      showError(e.toString());
      return Result.error(e);
    }
  }
}

class SoundboardButton extends StatefulWidget {
  const SoundboardButton({
    super.key,
    required this.methodName,
    required this.method,
    required this.formFields,
    this.requestSymbol,
    this.requestFromJson,
  });

  final String methodName;
  final Function method;
  final Symbol? requestSymbol;
  final Object Function(Map<String, Object?>)? requestFromJson;
  final List<Widget> formFields;

  @override
  State<SoundboardButton> createState() => _SoundboardButtonState();
}

class _SoundboardButtonState extends State<SoundboardButton> {
  final _formKey = GlobalKey<FormState>();

  TextStyle get headerStyle => Theme.of(context).textTheme.headline6!;

  SoundboardAction? _buildAction(Map<String, Object?> json) {
    if (!_formKey.currentState!.validate()) {
      return null;
    }
    final request = widget.requestFromJson?.call(json);
    return SoundboardAction(
      methodName: widget.methodName,
      method: widget.method,
      request: request,
      symbol: widget.requestSymbol,
    );
  }

  @override
  Widget build(BuildContext context) {
    final flow = Soundboard.of(context);
    return ElevatedButton(
      onPressed: () async {
        await showDialog<void>(
          context: context,
          builder: (context) {
            final state = SoundboardModalState();
            return Dialog(
              child: SoundboardModal(
                state: state,
                child: Form(
                  key: _formKey,
                  child: Padding(
                    padding: const EdgeInsets.all(12),
                    child: Column(
                      children: [
                        Text(
                          widget.methodName,
                          style: headerStyle,
                        ),
                        const SizedBox(height: 20),
                        ...widget.formFields
                            .spacedBy(const SizedBox(height: 20)),
                        const SizedBox(height: 30),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            ElevatedButton(
                              onPressed: () async {
                                final action = _buildAction(state.jsonBuilder);
                                if (action == null) {
                                  return;
                                }
                                flow.addAction(action);
                                Navigator.of(context).pop();
                              },
                              child: const Text('Add To Flow'),
                            ),
                            const SizedBox(width: 20),
                            ElevatedButton(
                              onPressed: () async {
                                final action = _buildAction(state.jsonBuilder);
                                if (action == null) {
                                  return;
                                }
                                unawaited(action.execute());
                                Navigator.of(context).pop();
                              },
                              child: const Text('Execute'),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
        );
      },
      child: Text(widget.methodName),
    );
  }
}

class SoundboardTextField extends StatelessWidget {
  const SoundboardTextField({
    super.key,
    required this.jsonPath,
    required this.labelText,
    required this.required,
  });

  final JsonPath jsonPath;
  final String labelText;
  final bool required;

  @override
  Widget build(BuildContext context) {
    final state = SoundboardModal.of(context);
    return TextFormField(
      decoration: InputDecoration(
        labelText: '$labelText${required ? '*' : ''}',
      ),
      validator: (value) {
        if (!required) {
          return null;
        }
        if (value == null || value.isEmpty) {
          return 'Must provider value';
        }
        return null;
      },
      onChanged: (value) {
        jsonPath.write(state.jsonBuilder, value);
      },
    );
  }
}

class SoundboardMapField<T extends Object> extends StatefulWidget {
  const SoundboardMapField({
    super.key,
    required this.labelText,
    this.values,
    required this.jsonPath,
    this.limit,
    this.onChanged,
  });

  final int? limit;
  final String labelText;
  final List<T>? values;
  final JsonPath jsonPath;
  final void Function(Map<String, Object?> jsonBuilder, T key, String? value)?
      onChanged;

  @override
  State<SoundboardMapField<T>> createState() => _SoundboardMapFieldState<T>();
}

class _SoundboardMapFieldState<T extends Object>
    extends State<SoundboardMapField<T>> {
  final List<SoundboardMapFieldItem<T>> _items = [];

  void _addItem() {
    _items.add(
      SoundboardMapFieldItem(
        labelText: widget.labelText,
        jsonPath: widget.jsonPath,
        values: widget.values,
        onAdd: widget.limit != null && _items.length >= widget.limit! - 1
            ? null
            : () => setState(_addItem),
        onChanged: widget.onChanged,
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    _addItem();
  }

  @override
  Widget build(BuildContext context) {
    return Column(children: _items);
  }
}

class SoundboardMapFieldItem<T extends Object> extends StatefulWidget {
  const SoundboardMapFieldItem({
    super.key,
    required this.labelText,
    this.values,
    required this.jsonPath,
    required this.onAdd,
    this.onChanged,
  });

  final String labelText;
  final List<T>? values;
  final JsonPath jsonPath;
  final VoidCallback? onAdd;
  final void Function(Map<String, Object?> jsonBuilder, T key, String? value)?
      onChanged;

  @override
  State<SoundboardMapFieldItem<T>> createState() =>
      _SoundboardMapFieldItemState<T>();
}

class _SoundboardMapFieldItemState<T extends Object>
    extends State<SoundboardMapFieldItem<T>> {
  T? _key;

  @override
  Widget build(BuildContext context) {
    final state = SoundboardModal.of(context);
    return Row(
      children: [
        Expanded(
          child: T == String
              ? TextFormField(
                  decoration: InputDecoration(
                    labelText: widget.labelText,
                  ),
                  onChanged: (val) {
                    setState(() => _key = val as T?);
                  },
                )
              : DropdownButtonFormField<T>(
                  decoration: InputDecoration(
                    labelText: widget.labelText,
                  ),
                  value: _key,
                  items: [
                    const DropdownMenuItem(
                      value: null,
                      child: Text('-'),
                    ),
                    for (final val in widget.values!)
                      DropdownMenuItem(
                        value: val,
                        child: FittedBox(
                          child: Text(_nameFor(val)!),
                        ),
                      )
                  ],
                  onChanged: (val) {
                    setState(() => _key = val);
                  },
                ),
        ),
        const SizedBox(width: 20),
        Expanded(
          child: TextFormField(
            decoration: InputDecoration(
              labelText: _nameFor(_key),
            ),
            validator: (value) {
              if (_key == null) {
                return null;
              }
              if (value == null || value.isEmpty) {
                return 'Must enter value';
              }
              return null;
            },
            onChanged: (value) {
              if (_key != null) {
                if (widget.onChanged != null) {
                  widget.onChanged!(state.jsonBuilder, _key!, value);
                } else {
                  widget.jsonPath.subPath<T, String>(_key!).write(
                        state.jsonBuilder,
                        value,
                      );
                }
              }
            },
          ),
        ),
        IconButton(
          icon: const Icon(Icons.add_circle),
          onPressed: widget.onAdd,
        )
      ],
    );
  }
}

class SoundboardToggle extends StatefulWidget {
  const SoundboardToggle({
    super.key,
    required this.labelText,
    required this.jsonPath,
  });

  final String labelText;
  final JsonPath jsonPath;

  @override
  State<SoundboardToggle> createState() => _SoundboardToggleState();
}

class _SoundboardToggleState extends State<SoundboardToggle> {
  bool? _toggled;

  @override
  Widget build(BuildContext context) {
    final jsonBuilder = SoundboardModal.of(context).jsonBuilder;
    return CheckboxListTile(
      title: Text(widget.labelText),
      tristate: true,
      value: _toggled,
      onChanged: (value) {
        widget.jsonPath.write(jsonBuilder, value);
        setState(() => _toggled = value);
      },
    );
  }
}

class SoundboardDropdown<T extends Object> extends StatefulWidget {
  const SoundboardDropdown({
    super.key,
    required this.labelText,
    required this.jsonPath,
    required this.values,
    this.required = false,
  });

  final bool required;
  final String labelText;
  final JsonPath jsonPath;
  final List<T> values;

  @override
  State<SoundboardDropdown<T>> createState() => _SoundboardDropdownState<T>();
}

class _SoundboardDropdownState<T extends Object>
    extends State<SoundboardDropdown<T>> {
  T? _key;

  @override
  Widget build(BuildContext context) {
    return DropdownButtonFormField<T>(
      decoration: InputDecoration(
        labelText: widget.labelText,
      ),
      value: _key,
      items: [
        const DropdownMenuItem(
          value: null,
          child: Text('-'),
        ),
        for (final val in widget.values)
          DropdownMenuItem(
            value: val,
            child: FittedBox(
              child: Text(_nameFor(val)!),
            ),
          )
      ],
      validator: (val) {
        if (!widget.required) {
          return null;
        }
        if (val == null) {
          return 'Must select a value';
        }
        return null;
      },
      onChanged: (val) {
        setState(() => _key = val);
      },
    );
  }
}

String? _nameFor(Object? key) {
  if (key == null) {
    return null;
  }
  if (key is Enum) {
    return key.name;
  }
  if (key is CognitoUserAttributeKey) {
    return key.key;
  }
  return key.toString();
}

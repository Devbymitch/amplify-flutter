import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter/material.dart';
import 'package:pentest_soundboard/common.dart';

import 'amplifyconfiguration.dart';
import 'buttons.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late final _flow = SoundboardFlow();

  Future<void> _configure() async {
    try {
      await Amplify.addPlugin(AmplifyAuthCognito());
      await Amplify.configure(amplifyconfig);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        showSuccess('Amplify successfully configured');
      });
    } on Exception catch (e) {
      if (e.toString().contains('already')) {
        return;
      }
      WidgetsBinding.instance.addPostFrameCallback((_) {
        showError(e.toString());
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: FutureBuilder<void>(
        future: _configure(),
        builder: (context, snapshot) {
          if (snapshot.connectionState != ConnectionState.done) {
            return const Center(
              child: SizedBox.square(
                dimension: 50,
                child: CircularProgressIndicator(),
              ),
            );
          }
          return Soundboard(flow: _flow, child: const HomeScreen());
        },
      ),
      scaffoldMessengerKey: scaffoldMessengerKey,
      debugShowCheckedModeBanner: false,
    );
  }
}

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final count = Soundboard.of(context).actionsCount;
    IconData icon;
    switch (count) {
      case 1:
        icon = Icons.filter_1;
        break;
      case 2:
        icon = Icons.filter_2;
        break;
      case 3:
        icon = Icons.filter_3;
        break;
      case 4:
        icon = Icons.filter_4;
        break;
      case 5:
        icon = Icons.filter_5;
        break;
      case 6:
        icon = Icons.filter_6;
        break;
      case 7:
        icon = Icons.filter_7;
        break;
      case 8:
        icon = Icons.filter_8;
        break;
      case 9:
        icon = Icons.filter_9;
        break;
      default:
        icon = Icons.filter;
        break;
    }
    return Scaffold(
      appBar: AppBar(
        title: const Text('Pentest Soundboard'),
        actions: [
          IconButton(
            onPressed: () {
              showDialog<void>(
                context: context,
                builder: (_) => SoundboardFlowModal(
                  flow: Soundboard.of(context),
                ),
              );
            },
            icon: Icon(icon),
          ),
        ],
      ),
      body: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 500),
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: ListView(
              children: [
                const SizedBox(height: 30),
                ...buttons.spacedBy(const SizedBox(height: 15)),
                const SizedBox(height: 30),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

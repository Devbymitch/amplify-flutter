// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'dart:convert';

import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_json_viewer/flutter_json_viewer.dart';

class GraphQLApiScreen extends StatefulWidget {
  final bool isAmplifyConfigured;

  const GraphQLApiScreen({Key? key, this.isAmplifyConfigured = false})
      : super(key: key);

  @override
  State<GraphQLApiScreen> createState() => _GraphQLApiScreenState();
}

class _GraphQLApiScreenState extends State<GraphQLApiScreen> {
  Map<String, dynamic>? _result;
  void Function()? _unsubscribe;
  late CancelableOperation _lastOperation;

  Future<void> subscribe() async {
    String graphQLDocument = '''subscription MySubscription {
    onCreateBlog {
      id
      name
    }
  }''';
    final Stream<GraphQLResponse<String>> operation = Amplify.API.subscribe(
      GraphQLRequest<String>(document: graphQLDocument),
      onEstablished: () => print('Subscription established'),
    );

    final streamSubscription = operation.listen(
      (event) {
        print('Subscription event data received: ${event.data}');
        setState(() {
          _result = event.data != null ? jsonDecode(event.data!) : null;
        });
      },
      onError: (Object error) => print(
        'Error in GraphQL subscription: $error',
      ),
    );
    _unsubscribe = streamSubscription.cancel;
  }

  Future<void> query() async {
    String graphQLDocument = '''query MyQuery {
      listBlogs {
        items {
          id
          name
          createdAt
        }
      }
    }''';

    var operation = Amplify.API
        .query<String>(request: GraphQLRequest(document: graphQLDocument));
    _lastOperation = operation.operation;

    var response = await operation.response;
    var data = response.data;
    if (data == null) {
      print('errors: ${response.errors}');
      return;
    }

    print('Result data: $data');
    setState(() {
      _result = jsonDecode(data);
    });
  }

  Future<void> mutate() async {
    String graphQLDocument = '''mutation MyMutation(\$name: String!) {
      createBlog(input: {name: \$name}) {
        id
        name
      }
    }''';

    var operation = Amplify.API.mutate(
      request: GraphQLRequest<String>(
        document: graphQLDocument,
        variables: <String, dynamic>{'name': 'Test App Blog'},
      ),
    );
    _lastOperation = operation.operation;

    var response = await operation.response;
    var data = response.data;
    if (response.hasErrors) {
      print('errors: ${response.errors}');
      return;
    }

    print('Result data: $data');
    setState(() {
      if (data != null) _result = jsonDecode(data);
    });
  }

  void onCancelPressed() async {
    try {
      _lastOperation.cancel();
    } on Exception catch (e) {
      print('Cancel FAILED');
      print(e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: BackButton(onPressed: () => context.push('/')),
        title: const Text('GraphQL API (AppSync) Example'),
      ),
      body: ListView(
        padding: const EdgeInsets.all(10.0),
        children: <Widget>[
          Center(
            child: ElevatedButton(
              onPressed: widget.isAmplifyConfigured ? query : null,
              child: const Text('Run Query'),
            ),
          ),
          const Padding(padding: EdgeInsets.all(10.0)),
          Center(
            child: ElevatedButton(
              onPressed: widget.isAmplifyConfigured ? mutate : null,
              child: const Text('Run Mutation'),
            ),
          ),
          const Padding(padding: EdgeInsets.all(10.0)),
          Center(
            child: ElevatedButton(
              onPressed: widget.isAmplifyConfigured ? subscribe : null,
              child: const Text('Subscribe'),
            ),
          ),
          const Padding(padding: EdgeInsets.all(10.0)),
          Center(
            child: ElevatedButton(
              onPressed: () => setState(() {
                _unsubscribe?.call();
                _unsubscribe = null;
              }),
              child: const Text('Unsubscribe'),
            ),
          ),
          const Padding(padding: EdgeInsets.all(10.0)),
          Center(
              child: ElevatedButton(
            onPressed: onCancelPressed,
            child: const Text('Cancel'),
          )),
          const Padding(padding: EdgeInsets.all(10.0)),
          const Text('Result:'),
          (_result != null ? JsonObjectViewer(_result!) : const Text('none')),
        ],
      ),
    );
  }
}

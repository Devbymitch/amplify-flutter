import 'package:amplify_storage_s3/amplify_storage_s3.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter_json_viewer/flutter_json_viewer.dart';
import 'package:go_router/go_router.dart';

class StorageScreen extends StatefulWidget {
  const StorageScreen({Key? key, this.isAmplifyConfigured = true})
      : super(key: key);

  final bool isAmplifyConfigured;

  @override
  State<StorageScreen> createState() => _StorageState();
}

class _StorageState extends State<StorageScreen> {
  String? _uploadFileResult;
  String? _getUrlResult;
  String? _removeResult;
  Map<String, dynamic>? _result;
  List<int>? _downloadedImage;

  @override
  void initState() {
    super.initState();
  }

  void upload() async {
    try {
      print('In upload');
      // Uploading the file with options
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        withData: false,
        withReadStream: true,
        allowedExtensions: ['jpg', 'jpeg', 'png', 'gif'],
        allowMultiple: false,
      );

      if (result == null) {
        return;
      }

      final fileName = result.files.first.name;
      final file = AWSFile.fromStream(
        result.files.single.readStream!,
        size: result.files.single.size,
      );
      final uploadOperation = Amplify.Storage.uploadFile(
        localFile: file,
        // Needs to be absolute path using in native platforms (Dart VM)
        key: 'album/$fileName',
        options: const S3StorageUploadFileOptions(
          storageAccessLevel: StorageAccessLevel.private,
        ),
      );

      final amplifyResult = await uploadOperation.result;
      setState(() {
        _uploadFileResult = amplifyResult.uploadedItem.key;
        _result = {'uploadedItem': amplifyResult.uploadedItem.toString()};
      });
    } catch (e) {
      print('UploadFile Err: ' + e.toString());
    }
  }

  void download() async {
    try {
      print('In download');
      final key = _uploadFileResult;
      if (key == null) {
        return;
      }
      final downloadDataOperation = Amplify.Storage.downloadData(
        key: key,
        options: S3StorageDownloadDataOptions(
          storageAccessLevel: StorageAccessLevel.private,
          getProperties: true,
        ),
        onProgress: (progress) {
          print('Progress: ${(progress.getFractionCompleted() * 100).ceil()}%');
        },
      );

      final result = await downloadDataOperation.result;
      print('\nDownload completed!');
      print('Download bytes size: ${result.bytes.length}');

      setState(() {
        _downloadedImage = result.bytes;
        _result = {'downloadedItem': result.downloadedItem};
      });
    } catch (e) {
      print('download Err: ' + e.toString());
    }
  }

  void getUrl() async {
    try {
      print('In getUrl');
      if (_uploadFileResult == null) {
        print('No file uploaded to get URL.');
        return;
      }
      String key = _uploadFileResult!;
      print(key);
      final getUrlOperation = Amplify.Storage.getUrl(
        key: key,
        options: S3StorageGetUrlOptions(
          storageAccessLevel: StorageAccessLevel.private,
          // generate url expires in 1 day by default if this parameter is not
          // specified
          expiresIn: const Duration(
            minutes: 10,
          ),
          checkObjectExistence: true,
        ),
      );

      final result = await getUrlOperation.result;
      print(result.url);
      setState(() {
        _getUrlResult = result.url.toString();
        _result = {'lastUploadedUrl': result.url.toString()};
      });
    } catch (e) {
      print('GetUrl Err: ' + e.toString());
    }
  }

  void remove() async {
    final key = _uploadFileResult;
    if (key == null) {
      return;
    }
    final removeOperation = Amplify.Storage.remove(
      key: key,
      options: S3StorageRemoveOptions(
        storageAccessLevel: StorageAccessLevel.private,
      ),
    );

    try {
      final result = await removeOperation.result;
      setState(() {
        _getUrlResult = null;
        _uploadFileResult = null;
        _downloadedImage = null;
        _result = {'removedItem': result.removedItem.toString()};
      });
    } on Exception catch (error) {
      print('remove err: $error');
    }
  }

  void list() async {
    try {
      print('In list');
      final result = await Amplify.Storage.list(
          options: const S3StorageListOptions(
        storageAccessLevel: StorageAccessLevel.private,
        pageSize: 10,
      )).result;
      for (StorageItem item in result.items) {
        print(
            'Item: { key:${item.key}, eTag:${item.eTag}, lastModified:${item.lastModified}, size:${item.size}');
      }
      setState(() {
        _result = {'items': result.items};
      });
    } catch (e) {
      print('List Err: ' + e.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    final resultWidget = _getUrlResult != null
        ? Image.network(_getUrlResult!)
        : (_result != null ? JsonObjectViewer(_result!) : const Text('none'));
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          leading: BackButton(onPressed: () => context.push('/')),
          title: const Text('Storage S3 Plugin Example'),
        ),
        body: ListView(
          padding: EdgeInsets.all(10.0),
          children: <Widget>[
            Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  ElevatedButton(
                    onPressed: upload,
                    child: const Text('Upload File'),
                  ),
                  const Padding(padding: EdgeInsets.all(5.0)),
                  Text('Uploaded File: $_uploadFileResult'),
                  ElevatedButton(
                    onPressed: download,
                    child: const Text('Download Last Uploaded File'),
                  ),
                  const Padding(padding: EdgeInsets.all(5.0)),
                  ElevatedButton(
                    onPressed: remove,
                    child: const Text('Remove uploaded File'),
                  ),
                  const Padding(padding: EdgeInsets.all(5.0)),
                  Text('Removed File: $_removeResult'),
                  const Padding(padding: EdgeInsets.all(5.0)),
                  ElevatedButton(
                    onPressed: list,
                    child: const Text('List Files'),
                  ),
                  const Padding(padding: EdgeInsets.all(5.0)),
                  ElevatedButton(
                    onPressed: getUrl,
                    child: const Text('GetUrl for uploaded File'),
                  ),
                  const Padding(padding: EdgeInsets.all(5.0)),
                  const Text(
                    'Result:',
                  ),
                  resultWidget,
                  _downloadedImage != null
                      ? Image.memory(Uint8List.fromList(_downloadedImage!))
                      : const Text('Upload and download an image to display.'),
                ])
          ],
        ),
      ),
    );
  }
}

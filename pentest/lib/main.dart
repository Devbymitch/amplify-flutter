// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'package:amplify_api/amplify_api.dart';
import 'package:amplify_storage_s3/amplify_storage_s3.dart';
import 'package:amplify_analytics_pinpoint/amplify_analytics_pinpoint.dart';
import 'package:non_auth_pentest/amplifyconfiguration.dart';
import 'package:non_auth_pentest/screens/analytics_screen.dart';
import 'package:non_auth_pentest/screens/graphql_api_screen.dart';
import 'package:non_auth_pentest/screens/rest_api_screen.dart';
import 'package:non_auth_pentest/screens/storage_screen.dart';
import 'package:non_auth_pentest/src/constants.dart';

import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_authenticator/amplify_authenticator.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  static final _router = GoRouter(routes: [
    GoRoute(
      path: '/',
      builder: (BuildContext _, GoRouterState __) => const HomeScreen(),
    ),
    GoRoute(
      path: graphQLRoute,
      builder: (BuildContext _, GoRouterState __) => GraphQLApiScreen(
        isAmplifyConfigured: Amplify.isConfigured,
      ),
    ),
    GoRoute(
      path: restRoute,
      builder: (BuildContext _, GoRouterState __) => const RestApiScreen(),
    ),
    GoRoute(
      path: storageRoute,
      builder: (BuildContext _, GoRouterState __) => StorageScreen(
        isAmplifyConfigured: Amplify.isConfigured,
      ),
    ),
    GoRoute(
      path: analyticsRoute,
      builder: (BuildContext _, GoRouterState __) => const AnalyticsScreen(),
    ),
  ]);

  @override
  void initState() {
    super.initState();
    _configure();
  }

  Future<void> _configure() async {
    try {
      await Amplify.addPlugins([
        AmplifyAuthCognito(),
        AmplifyAPI(),
        AmplifyStorageS3(),
        AmplifyAnalyticsPinpoint(),
      ]);
      await Amplify.configure(amplifyconfig);
    } on Exception catch (e) {
      safePrint('$fromPenTest Configuring Amplify failed: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Authenticator(
      preferPrivateSession: true,
      child: MaterialApp.router(
        title: 'Amplify Demo',
        builder: Authenticator.builder(),
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        routeInformationParser: _router.routeInformationParser,
        routeInformationProvider: _router.routeInformationProvider,
        routerDelegate: _router.routerDelegate,
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final _greeting = '';
  final _loading = false;
  late final _controller = TextEditingController();

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Amplify Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            if (_loading)
              const CircularProgressIndicator()
            else
              Text(_greeting),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: () => context.push(graphQLRoute),
              child: const Text('GraphQL API (AppSync)'),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: () => context.push(restRoute),
              child: const Text('REST API (API Gateway)'),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: () => context.push(storageRoute),
              child: const Text('Storage (S3)'),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: () => context.push(analyticsRoute),
              child: const Text('Analytics (Pinpoint)'),
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () => Amplify.Auth.signOut(),
              child: const Text('Sign out'),
            ),
          ],
        ),
      ),
    );
  }
}
